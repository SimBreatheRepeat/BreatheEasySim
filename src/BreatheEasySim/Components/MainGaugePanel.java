/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package BreatheEasySim.Components;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author kyleh
 */
public class MainGaugePanel extends javax.swing.JPanel {

    /**
     * Creates new form MainGaugePanel
     */
    public MainGaugePanel() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gauge1 = new BreatheEasySim.Components.Gauge();
        gauge2 = new BreatheEasySim.Components.Gauge();
        gauge3 = new BreatheEasySim.Components.Gauge();
        gauge4 = new BreatheEasySim.Components.Gauge();
        gauge5 = new BreatheEasySim.Components.Gauge();
        gauge6 = new BreatheEasySim.Components.Gauge();
        gauge7 = new BreatheEasySim.Components.Gauge();

        setMinimumSize(new java.awt.Dimension(1600, 141));
        setOpaque(false);
        setPreferredSize(new java.awt.Dimension(1600, 141));
        setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        gauge1.setName(""); // NOI18N
        gauge1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge1MouseClicked(evt);
            }
        });
        add(gauge1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1120, 0, 180, 141));
        gauge1.jLabel4.setText("<html><body style='text-align: center'>cmH2O<br>PEEP</html>");

        gauge2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge2MouseClicked(evt);
            }
        });
        add(gauge2, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 180, 141));
        gauge2.jLabel4.setText("<html><body style='text-align: center'>bpm<br>Rate</html>");

        gauge3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge3MouseClicked(evt);
            }
        });
        add(gauge3, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 0, 180, 141));
        gauge3.jLabel4.setText("<html><body style='text-align: center'>L<br>Volume</html>");

        gauge4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge4MouseClicked(evt);
            }
        });
        add(gauge4, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 180, 141));
        gauge4.jLabel4.setText("<html><body style='text-align: center'>L/min<br>Peak Flow</html>");

        gauge5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge5MouseClicked(evt);
            }
        });
        add(gauge5, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 180, 141));
        gauge5.jLabel4.setText("<html><body style='text-align: center'>sec<br>Insp Pause</html>");

        gauge6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge6MouseClicked(evt);
            }
        });
        add(gauge6, new org.netbeans.lib.awtextra.AbsoluteConstraints(1420, 0, 180, 141));
        gauge6.jLabel4.setText("<html><body style='text-align: center'>%<br>FiO2</html>");

        gauge7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                gauge7MouseClicked(evt);
            }
        });
        add(gauge7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1270, 0, 180, 141));
        gauge7.jLabel4.setText("<html><body style='text-align: center'>L/min<br>Flow Trig</html>");
    }// </editor-fold>//GEN-END:initComponents

    private BreatheEasySim.Components.Gauge selectedGauge;
    private volatile boolean shouldContinue = true;
    private volatile Thread parallelThread;
    
    private void anyGaugeMouseClicked(java.awt.event.MouseEvent evt) throws IOException {
        // Get the source of the click event (the gauge that was clicked)
        Object source = evt.getSource();

        // Check if the source is a BreatheEasySim.Components.Gauge object
        if (source instanceof BreatheEasySim.Components.Gauge) {
          selectedGauge = (BreatheEasySim.Components.Gauge) source;
          BreatheEasySim.Components.Gauge prevselectedGauge = selectedGauge;
          
          System.out.println(System.getProperty("user.dir"));
        
            ProcessBuilder processBuilder = new ProcessBuilder("python", "rotary_encoder.py");
            Process proc = processBuilder.start();

            BufferedReader stdInput = new BufferedReader(new InputStreamReader(proc.getInputStream()));

            // Read the output from the command
            String s = null;
            String first = stdInput.readLine();

            while ((s = stdInput.readLine()) != null && source.equals(prevselectedGauge)) {
                System.out.println(s);
                System.out.println("First: " + first);
                selectedGauge.changeValue(Integer.parseInt(s));
            }
            proc.destroy();
        }
    }
    
    
    private void gauge2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge2MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                while(shouldContinue){
                    try {
                        Thread.sleep(2000); // Sleep for 2 seconds
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                if (!shouldContinue) {
                    System.out.println("Parallel process interrupted by user.");
                } else {
                    Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge2MouseClicked

    private void gauge1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge1MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                try {
                    Thread.sleep(2000); // Sleep for 2 seconds
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge1MouseClicked

    private void gauge3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge3MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                while(shouldContinue){
                    try {
                        Thread.sleep(2000); // Sleep for 2 seconds
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                if (!shouldContinue) {
                    System.out.println("Parallel process interrupted by user.");
                } else {
                    Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge3MouseClicked

    private void gauge4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge4MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                try {
                    Thread.sleep(2000); // Sleep for 2 seconds
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge4MouseClicked

    private void gauge5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge5MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                try {
                    Thread.sleep(2000); // Sleep for 2 seconds
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge5MouseClicked

    private void gauge6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge6MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                try {
                    Thread.sleep(2000); // Sleep for 2 seconds
                } catch (InterruptedException ex) {
                    ex.printStackTrace();
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge6MouseClicked

    private void gauge7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_gauge7MouseClicked
        // Check if there's an existing thread and interrupt it
        if (parallelThread != null && parallelThread.isAlive()) {
            shouldContinue = false; // Set the flag to false to stop the thread
            parallelThread.interrupt(); // Interrupt the thread to stop its execution
        }
        
        Thread parallelThread = new Thread(() -> {
            try {
                // Your parallel process logic here                anyGaugeMouseClicked(evt);

                anyGaugeMouseClicked(evt);
                System.out.println("Parallel process started!");
                // Simulate some work
                while(shouldContinue){
                    try {
                        Thread.sleep(2000); // Sleep for 2 seconds
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }
                System.out.println("Parallel process completed!");
            } catch (IOException ex) {
                if (!shouldContinue) {
                    System.out.println("Parallel process interrupted by user.");
                } else {
                    Logger.getLogger(MainGaugePanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        // Start the thread
        parallelThread.start();
        System.out.println(selectedGauge);
    }//GEN-LAST:event_gauge7MouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private BreatheEasySim.Components.Gauge gauge1;
    private BreatheEasySim.Components.Gauge gauge2;
    private BreatheEasySim.Components.Gauge gauge3;
    private BreatheEasySim.Components.Gauge gauge4;
    private BreatheEasySim.Components.Gauge gauge5;
    private BreatheEasySim.Components.Gauge gauge6;
    private BreatheEasySim.Components.Gauge gauge7;
    // End of variables declaration//GEN-END:variables
}
